@page "/admin/brigade-list"
@attribute [Authorize]

<PageTitle>Brigade list</PageTitle>

<MudTable Items="@_brigades" Loading="@_isLoading" LoadingProgressColor="Color.Primary" Elevation="3" Striped="true" Hover="true" Dense="true" FixedHeader="true" Height="70vh">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Brigade list</MudText>
        <MudSpacer />
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddDialog">
            Add new brigade
        </MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Date from</MudTh>
        <MudTh>Date to</MudTh>
        <MudTh>Conductor limit</MudTh>
        <MudTh>Is active?</MudTh>
        <MudTh>Vehicle set name</MudTh>
        <MudTh>Line number</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Date from">@context.DateTimeFrom</MudTd>
        <MudTd DataLabel="Date to">@context.DateTimeTo</MudTd>
        <MudTd DataLabel="Conductor limit">@context.ConductorLimit</MudTd>
        <MudTd DataLabel="Is active?">@(context.IsActive ? Localizer["text-global-yes"] : Localizer["text-global-no"])</MudTd>
        <MudTd DataLabel="Vehicle set name">@context.Set.Name</MudTd>
        <MudTd DataLabel="Line number">@context.Line.Number</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.ExpandMore" Color="Color.Inherit" OnClick="(() => OnMoreClick(context.Id))" />
            <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Text" Icon="@Icons.Material.Filled.Edit" OnClick="(() => OpenEditDialog(context.Id))" />
            <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Text" Icon="@Icons.Material.Filled.Delete" OnClick="(() => OnDeleteClick(context.Id))" />
        </MudTd>
    </RowTemplate>
    <ChildRowContent>
        @if (context.ShowDetails)
        {
            <MudTr>
                <td></td>
                <td colspan="7">
                    <MudTable Items="@context.BrigadeUsers" Context="BrigadeContext" Elevation="0" Striped="true" Hover="true" Dense="true">
                        <ToolBarContent>
                            <MudText Typo="Typo.body1">Conductors for brigade <strong>@context.Name</strong></MudText>
                            <MudSpacer />
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="(() => OpenAddToBrigadeDialog(context.Id))">
                                Add conductor to brigade
                            </MudButton> 
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Id</MudTh>
                            <MudTh>First name</MudTh>
                            <MudTh>Last name</MudTh>
                            <MudTh>Is manager?</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Id">@BrigadeContext.User.Id</MudTd>
                            <MudTd DataLabel="First name">@BrigadeContext.User.FirstName</MudTd>
                            <MudTd DataLabel="Last name">@BrigadeContext.User.LastName</MudTd>
                            <MudTd DataLabel="Is manager?">@BrigadeContext.IsManager</MudTd>
                            <MudTd>
                                <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Text" Icon="@Icons.Material.Filled.Delete" OnClick="(() => OnDeleteFromBrigadeClick(BrigadeContext.BrigadeId, BrigadeContext.UserId))" />
                            </MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <MudText Typo="Typo.body2">
                                No conductors in brigade found
                            </MudText>
                        </NoRecordsContent>
                    </MudTable>
                </td>
            </MudTr>
        }
    </ChildRowContent>
    <NoRecordsContent>
        <MudText Typo="Typo.body2">
            No brigades found
        </MudText>
    </NoRecordsContent>
</MudTable>

@code {
    private IEnumerable<Brigade> _brigades = new List<Brigade>();
    private bool _isLoading = false;
    

    protected override async void OnInitialized()
    {
        GetData();
    }

    private async void GetData()
    {
        try
        {
            _isLoading = true;
            _brigades = await ShiftService.GetAll();
            _isLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnMoreClick(int id)
    {
        var set = _brigades.First(x => x.Id == id);
        set.ShowDetails = !set.ShowDetails;
    }

    private async Task OpenAddDialog()
    {
        var dialog = DialogService.Show<AddBrigadeDialog>("Add brigade", new DialogOptions {MaxWidth = MaxWidth.Medium, FullWidth = true });
        var dialogResult = await dialog.Result;

        if(!dialogResult.Cancelled)
            GetData();
    }

    private async Task OpenEditDialog(int id)
    {
        var dialog = DialogService.Show<EditBrigadeDialog>("Edit brigade", new DialogParameters { ["Id"] = id }, new DialogOptions {MaxWidth = MaxWidth.Medium, FullWidth = true });
        var dialogResult = await dialog.Result;

        if(!dialogResult.Cancelled)
            GetData();
    }

    private async Task OpenAddToBrigadeDialog(int id)
    {
        var dialog = DialogService.Show<AddToBrigadeDialog>("Add conductor to brigade", new DialogParameters { ["Id"] = id }, new DialogOptions {MaxWidth = MaxWidth.Medium, FullWidth = true });
        var dialogResult = await dialog.Result;

        if(!dialogResult.Cancelled)
            GetData();
    }

    public async void OnDeleteClick(int id)
    {
        var messageBox = await DialogService.ShowMessageBox("Delete brigade", "Are you sure?", Localizer["text-global-yes"], Localizer["text-global-no"]);

        if(messageBox ?? false)
        {
            try
            {
                await ShiftService.DeleteBrigade(id);
                Snackbar.Add(Localizer["snackbar-admin-delete-user-success"], Severity.Success);
                GetData();
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
                StateHasChanged();
            }
        }
    }

    public async void OnDeleteFromBrigadeClick(int brigadeId, int userId)
    {
        var messageBox = await DialogService.ShowMessageBox("Delete conductor from brigade", "Are you sure?", Localizer["text-global-yes"], Localizer["text-global-no"]);

        if(messageBox ?? false)
        {
            try
            {
                await ShiftService.DeleteUserFromBrigade(brigadeId, userId);
                Snackbar.Add(Localizer["snackbar-admin-delete-user-success"], Severity.Success);
                GetData();
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
                StateHasChanged();
            }
        }
    }
}